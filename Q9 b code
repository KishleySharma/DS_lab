#include <stdio.h>
#include <conio.h>

void dfs(int, int*);
int isCyclicUtil(int, int, int*);
int isConnected();
int n, i, j;
char a[10][10], vis[10];

int main() {
    printf("Enter the number of vertices (max 10):\n");
    scanf("%d", &n);


    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            a[i][j] = '0';
        }
        vis[i] = 0;
    }

    printf("Enter the adjacency matrix (use 1 for edge and 0 for no edge):\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf(" %c", &a[i][j]);
        }
    }


    int visited[10] = {0};
    int hasCycle = 0;
    for (i = 0; i < n; i++) {
        if (!visited[i]) {
            if (isCyclicUtil(i, -1, visited)) {
                hasCycle = 1;
                break;
            }
        }
    }


    if (isConnected()) {
        printf("The graph is connected.\n");
    } else {
        printf("The graph is not connected.\n");
    }

    if (hasCycle) {
        printf("The graph doesnt't contains a cycle.\n");
    } else {
        printf("The graph does not contain a cycle.\n");
    }

    getch();
    return 0;
}

void dfs(int v, int *visited) {
    visited[v] = 1;
    printf("%c ", v + 'A');

    for (j = 0; j < n; j++) {
        if (a[v][j] == '1' && !visited[j]) {
            dfs(j, visited);
        }
    }
}

int isCyclicUtil(int v, int parent, int *visited) {
    visited[v] = 1;

    for (j = 0; j < n; j++) {
        if (a[v][j] == '1') {
            if (!visited[j]) {
                if (isCyclicUtil(j, v, visited)) {
                    return 1;
                }
            } else if (j != parent) {
                return 1;
            }
        }
    }
    return 0;
}

int isConnected() {
    int visited[10] = {0};
    dfs(0, visited);

    for (i = 0; i < n; i++) {
        if (!visited[i]) {
            return 0;
        }
    }
    return 1;
}
